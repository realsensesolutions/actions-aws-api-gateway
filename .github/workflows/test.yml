name: Test API Gateway Action

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_domain:
        description: 'Test domain to use (must have hosted zone)'
        required: true
        default: 'test-api.example.com'
      lambda_arn:
        description: 'Lambda ARN for testing'
        required: true

jobs:
  validate-terraform:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
      
      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: .
        
      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: .
        
      - name: Terraform Validate
        run: terraform validate
        working-directory: .
        env:
          TF_VAR_domain: "test-api.example.com"
          TF_VAR_function_arn: "arn:aws:lambda:us-east-1:123456789012:function:test"
          TF_VAR_hosted_zone_domain: "example.com"

  test-action-plan:
    name: Test Action (Plan Only)
    runs-on: ubuntu-latest
    needs: validate-terraform
    if: github.event_name == 'workflow_dispatch'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-api-gateway-test
          
      - name: Setup Terraform Backend
        uses: alonch/actions-aws-backend-setup@main
        with:
          instance: api-gateway-test
          
      - name: Test API Gateway Action (Plan)
        uses: ./
        with:
          domain: ${{ github.event.inputs.test_domain }}
          function: ${{ github.event.inputs.lambda_arn }}
          action: plan

  # This job would be used for full integration testing (commented out for safety)
  # test-action-full:
  #   name: Test Action (Full Deploy & Destroy)
  #   runs-on: ubuntu-latest
  #   needs: validate-terraform
  #   if: false # Disabled by default - enable manually for full testing
  #   
  #   permissions:
  #     id-token: write
  #     contents: read
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: us-east-1
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         role-session-name: github-actions-api-gateway-test
  #         
  #     - name: Setup Terraform Backend
  #       uses: alonch/actions-aws-backend-setup@main
  #       with:
  #         instance: api-gateway-test
  #         
  #     - name: Deploy API Gateway (Test)
  #       id: deploy
  #       uses: ./
  #       with:
  #         domain: test-api.yourdomain.com
  #         function: ${{ secrets.TEST_LAMBDA_ARN }}
  #         action: apply
  #         
  #     - name: Test API Gateway Outputs
  #       run: |
  #         echo "API Gateway ID: ${{ steps.deploy.outputs.api_gateway_id }}"
  #         echo "API Gateway ARN: ${{ steps.deploy.outputs.api_gateway_arn }}"
  #         echo "API Gateway URL: ${{ steps.deploy.outputs.api_gateway_url }}"
  #         echo "Custom Domain: ${{ steps.deploy.outputs.custom_domain_name }}"
  #         
  #         # Validate outputs are not empty
  #         [ -n "${{ steps.deploy.outputs.api_gateway_id }}" ] || exit 1
  #         [ -n "${{ steps.deploy.outputs.api_gateway_arn }}" ] || exit 1
  #         [ -n "${{ steps.deploy.outputs.api_gateway_url }}" ] || exit 1
  #         [ -n "${{ steps.deploy.outputs.custom_domain_name }}" ] || exit 1
  #         
  #     - name: Test API Endpoint (if accessible)
  #       run: |
  #         # Wait for deployment to be ready
  #         sleep 30
  #         
  #         # Test the API Gateway URL (may take time for DNS propagation)
  #         curl -f -s "${{ steps.deploy.outputs.api_gateway_url }}/" || echo "API not yet accessible (expected for new DNS)"
  #         
  #     - name: Cleanup - Destroy API Gateway
  #       if: always()
  #       uses: ./
  #       with:
  #         domain: test-api.yourdomain.com
  #         function: ${{ secrets.TEST_LAMBDA_ARN }}
  #         action: destroy 